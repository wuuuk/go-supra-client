// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: oracle/supra/client.proto

package supra

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PullService_GetProof_FullMethodName = "/pull_service.PullService/GetProof"
)

// PullServiceClient is the client API for PullService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PullServiceClient interface {
	GetProof(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullResponse, error)
}

type pullServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPullServiceClient(cc grpc.ClientConnInterface) PullServiceClient {
	return &pullServiceClient{cc}
}

func (c *pullServiceClient) GetProof(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullResponse, error) {
	out := new(PullResponse)
	err := c.cc.Invoke(ctx, PullService_GetProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PullServiceServer is the server API for PullService service.
// All implementations must embed UnimplementedPullServiceServer
// for forward compatibility
type PullServiceServer interface {
	GetProof(context.Context, *PullRequest) (*PullResponse, error)
	mustEmbedUnimplementedPullServiceServer()
}

// UnimplementedPullServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPullServiceServer struct {
}

func (UnimplementedPullServiceServer) GetProof(context.Context, *PullRequest) (*PullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProof not implemented")
}
func (UnimplementedPullServiceServer) mustEmbedUnimplementedPullServiceServer() {}

// UnsafePullServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PullServiceServer will
// result in compilation errors.
type UnsafePullServiceServer interface {
	mustEmbedUnimplementedPullServiceServer()
}

func RegisterPullServiceServer(s grpc.ServiceRegistrar, srv PullServiceServer) {
	s.RegisterService(&PullService_ServiceDesc, srv)
}

func _PullService_GetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PullServiceServer).GetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PullService_GetProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PullServiceServer).GetProof(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PullService_ServiceDesc is the grpc.ServiceDesc for PullService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PullService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pull_service.PullService",
	HandlerType: (*PullServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProof",
			Handler:    _PullService_GetProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/supra/client.proto",
}
