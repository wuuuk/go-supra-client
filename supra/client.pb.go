// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: oracle/supra/client.proto

package supra

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PullResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resp:
	//
	//	*PullResponse_Evm
	//	*PullResponse_Sui
	//	*PullResponse_Aptos
	Resp isPullResponse_Resp `protobuf_oneof:"resp"`
}

func (x *PullResponse) Reset() {
	*x = PullResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_supra_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullResponse) ProtoMessage() {}

func (x *PullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_supra_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullResponse.ProtoReflect.Descriptor instead.
func (*PullResponse) Descriptor() ([]byte, []int) {
	return file_oracle_supra_client_proto_rawDescGZIP(), []int{0}
}

func (m *PullResponse) GetResp() isPullResponse_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (x *PullResponse) GetEvm() *PullResponseEvm {
	if x, ok := x.GetResp().(*PullResponse_Evm); ok {
		return x.Evm
	}
	return nil
}

func (x *PullResponse) GetSui() *PullResponseSui {
	if x, ok := x.GetResp().(*PullResponse_Sui); ok {
		return x.Sui
	}
	return nil
}

func (x *PullResponse) GetAptos() *PullResponseAptos {
	if x, ok := x.GetResp().(*PullResponse_Aptos); ok {
		return x.Aptos
	}
	return nil
}

type isPullResponse_Resp interface {
	isPullResponse_Resp()
}

type PullResponse_Evm struct {
	Evm *PullResponseEvm `protobuf:"bytes,1,opt,name=evm,proto3,oneof"`
}

type PullResponse_Sui struct {
	Sui *PullResponseSui `protobuf:"bytes,2,opt,name=sui,proto3,oneof"`
}

type PullResponse_Aptos struct {
	Aptos *PullResponseAptos `protobuf:"bytes,3,opt,name=aptos,proto3,oneof"`
}

func (*PullResponse_Evm) isPullResponse_Resp() {}

func (*PullResponse_Sui) isPullResponse_Resp() {}

func (*PullResponse_Aptos) isPullResponse_Resp() {}

type PullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairIndexes []uint32 `protobuf:"varint,1,rep,packed,name=pair_indexes,json=pairIndexes,proto3" json:"pair_indexes,omitempty"`
	ChainType   string   `protobuf:"bytes,2,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
}

func (x *PullRequest) Reset() {
	*x = PullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_supra_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequest) ProtoMessage() {}

func (x *PullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_supra_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequest.ProtoReflect.Descriptor instead.
func (*PullRequest) Descriptor() ([]byte, []int) {
	return file_oracle_supra_client_proto_rawDescGZIP(), []int{1}
}

func (x *PullRequest) GetPairIndexes() []uint32 {
	if x != nil {
		return x.PairIndexes
	}
	return nil
}

func (x *PullRequest) GetChainType() string {
	if x != nil {
		return x.ChainType
	}
	return ""
}

type PullResponseEvm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairIndexes []uint32 `protobuf:"varint,1,rep,packed,name=pair_indexes,json=pairIndexes,proto3" json:"pair_indexes,omitempty"`
	ProofBytes  []byte   `protobuf:"bytes,2,opt,name=proof_bytes,json=proofBytes,proto3" json:"proof_bytes,omitempty"`
}

func (x *PullResponseEvm) Reset() {
	*x = PullResponseEvm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_supra_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullResponseEvm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullResponseEvm) ProtoMessage() {}

func (x *PullResponseEvm) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_supra_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullResponseEvm.ProtoReflect.Descriptor instead.
func (*PullResponseEvm) Descriptor() ([]byte, []int) {
	return file_oracle_supra_client_proto_rawDescGZIP(), []int{2}
}

func (x *PullResponseEvm) GetPairIndexes() []uint32 {
	if x != nil {
		return x.PairIndexes
	}
	return nil
}

func (x *PullResponseEvm) GetProofBytes() []byte {
	if x != nil {
		return x.ProofBytes
	}
	return nil
}

type PullResponseSui struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairIndexes             []uint32 `protobuf:"varint,1,rep,packed,name=pair_indexes,json=pairIndexes,proto3" json:"pair_indexes,omitempty"`
	DkgObject               string   `protobuf:"bytes,2,opt,name=dkg_object,json=dkgObject,proto3" json:"dkg_object,omitempty"`
	OracleHolderObject      string   `protobuf:"bytes,3,opt,name=oracle_holder_object,json=oracleHolderObject,proto3" json:"oracle_holder_object,omitempty"`
	VoteSmrBlockRound       []byte   `protobuf:"bytes,5,opt,name=vote_smr_block_round,json=voteSmrBlockRound,proto3" json:"vote_smr_block_round,omitempty"`
	VoteSmrBlockTimestamp   []byte   `protobuf:"bytes,6,opt,name=vote_smr_block_timestamp,json=voteSmrBlockTimestamp,proto3" json:"vote_smr_block_timestamp,omitempty"`
	VoteSmrBlockAuthor      []byte   `protobuf:"bytes,7,opt,name=vote_smr_block_author,json=voteSmrBlockAuthor,proto3" json:"vote_smr_block_author,omitempty"`
	VoteSmrBlockQcHash      []byte   `protobuf:"bytes,8,opt,name=vote_smr_block_qc_hash,json=voteSmrBlockQcHash,proto3" json:"vote_smr_block_qc_hash,omitempty"`
	VoteSmrBlockBatchHashes []byte   `protobuf:"bytes,9,opt,name=vote_smr_block_batch_hashes,json=voteSmrBlockBatchHashes,proto3" json:"vote_smr_block_batch_hashes,omitempty"`
	VoteRound               []byte   `protobuf:"bytes,10,opt,name=vote_round,json=voteRound,proto3" json:"vote_round,omitempty"`
	MinBatchProtocol        []byte   `protobuf:"bytes,11,opt,name=min_batch_protocol,json=minBatchProtocol,proto3" json:"min_batch_protocol,omitempty"`
	MinBatchTxnHashes       []byte   `protobuf:"bytes,12,opt,name=min_batch_txn_hashes,json=minBatchTxnHashes,proto3" json:"min_batch_txn_hashes,omitempty"`
	MinTxnClusterHashes     []byte   `protobuf:"bytes,13,opt,name=min_txn_cluster_hashes,json=minTxnClusterHashes,proto3" json:"min_txn_cluster_hashes,omitempty"`
	MinTxnSender            []byte   `protobuf:"bytes,14,opt,name=min_txn_sender,json=minTxnSender,proto3" json:"min_txn_sender,omitempty"`
	MinTxnProtocol          []byte   `protobuf:"bytes,15,opt,name=min_txn_protocol,json=minTxnProtocol,proto3" json:"min_txn_protocol,omitempty"`
	MinTxnTxSubType         []byte   `protobuf:"bytes,16,opt,name=min_txn_tx_sub_type,json=minTxnTxSubType,proto3" json:"min_txn_tx_sub_type,omitempty"`
	SccDataHash             []byte   `protobuf:"bytes,17,opt,name=scc_data_hash,json=sccDataHash,proto3" json:"scc_data_hash,omitempty"`
	SccPair                 []byte   `protobuf:"bytes,18,opt,name=scc_pair,json=sccPair,proto3" json:"scc_pair,omitempty"`
	SccPrices               []byte   `protobuf:"bytes,19,opt,name=scc_prices,json=sccPrices,proto3" json:"scc_prices,omitempty"`
	SccTimestamp            []byte   `protobuf:"bytes,20,opt,name=scc_timestamp,json=sccTimestamp,proto3" json:"scc_timestamp,omitempty"`
	SccDecimals             []byte   `protobuf:"bytes,21,opt,name=scc_decimals,json=sccDecimals,proto3" json:"scc_decimals,omitempty"`
	SccQc                   []byte   `protobuf:"bytes,22,opt,name=scc_qc,json=sccQc,proto3" json:"scc_qc,omitempty"`
	SccRound                []byte   `protobuf:"bytes,23,opt,name=scc_round,json=sccRound,proto3" json:"scc_round,omitempty"`
	SccId                   []byte   `protobuf:"bytes,24,opt,name=scc_id,json=sccId,proto3" json:"scc_id,omitempty"`
	SccMemberIndex          []byte   `protobuf:"bytes,25,opt,name=scc_member_index,json=sccMemberIndex,proto3" json:"scc_member_index,omitempty"`
	SccCommitteeIndex       []byte   `protobuf:"bytes,26,opt,name=scc_committee_index,json=sccCommitteeIndex,proto3" json:"scc_committee_index,omitempty"`
	BatchIdx                []byte   `protobuf:"bytes,27,opt,name=batch_idx,json=batchIdx,proto3" json:"batch_idx,omitempty"`
	TxnIdx                  []byte   `protobuf:"bytes,28,opt,name=txn_idx,json=txnIdx,proto3" json:"txn_idx,omitempty"`
	ClusterIdx              []byte   `protobuf:"bytes,29,opt,name=cluster_idx,json=clusterIdx,proto3" json:"cluster_idx,omitempty"`
	Sig                     []byte   `protobuf:"bytes,30,opt,name=sig,proto3" json:"sig,omitempty"`
	PairMask                []byte   `protobuf:"bytes,31,opt,name=pair_mask,json=pairMask,proto3" json:"pair_mask,omitempty"`
}

func (x *PullResponseSui) Reset() {
	*x = PullResponseSui{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_supra_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullResponseSui) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullResponseSui) ProtoMessage() {}

func (x *PullResponseSui) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_supra_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullResponseSui.ProtoReflect.Descriptor instead.
func (*PullResponseSui) Descriptor() ([]byte, []int) {
	return file_oracle_supra_client_proto_rawDescGZIP(), []int{3}
}

func (x *PullResponseSui) GetPairIndexes() []uint32 {
	if x != nil {
		return x.PairIndexes
	}
	return nil
}

func (x *PullResponseSui) GetDkgObject() string {
	if x != nil {
		return x.DkgObject
	}
	return ""
}

func (x *PullResponseSui) GetOracleHolderObject() string {
	if x != nil {
		return x.OracleHolderObject
	}
	return ""
}

func (x *PullResponseSui) GetVoteSmrBlockRound() []byte {
	if x != nil {
		return x.VoteSmrBlockRound
	}
	return nil
}

func (x *PullResponseSui) GetVoteSmrBlockTimestamp() []byte {
	if x != nil {
		return x.VoteSmrBlockTimestamp
	}
	return nil
}

func (x *PullResponseSui) GetVoteSmrBlockAuthor() []byte {
	if x != nil {
		return x.VoteSmrBlockAuthor
	}
	return nil
}

func (x *PullResponseSui) GetVoteSmrBlockQcHash() []byte {
	if x != nil {
		return x.VoteSmrBlockQcHash
	}
	return nil
}

func (x *PullResponseSui) GetVoteSmrBlockBatchHashes() []byte {
	if x != nil {
		return x.VoteSmrBlockBatchHashes
	}
	return nil
}

func (x *PullResponseSui) GetVoteRound() []byte {
	if x != nil {
		return x.VoteRound
	}
	return nil
}

func (x *PullResponseSui) GetMinBatchProtocol() []byte {
	if x != nil {
		return x.MinBatchProtocol
	}
	return nil
}

func (x *PullResponseSui) GetMinBatchTxnHashes() []byte {
	if x != nil {
		return x.MinBatchTxnHashes
	}
	return nil
}

func (x *PullResponseSui) GetMinTxnClusterHashes() []byte {
	if x != nil {
		return x.MinTxnClusterHashes
	}
	return nil
}

func (x *PullResponseSui) GetMinTxnSender() []byte {
	if x != nil {
		return x.MinTxnSender
	}
	return nil
}

func (x *PullResponseSui) GetMinTxnProtocol() []byte {
	if x != nil {
		return x.MinTxnProtocol
	}
	return nil
}

func (x *PullResponseSui) GetMinTxnTxSubType() []byte {
	if x != nil {
		return x.MinTxnTxSubType
	}
	return nil
}

func (x *PullResponseSui) GetSccDataHash() []byte {
	if x != nil {
		return x.SccDataHash
	}
	return nil
}

func (x *PullResponseSui) GetSccPair() []byte {
	if x != nil {
		return x.SccPair
	}
	return nil
}

func (x *PullResponseSui) GetSccPrices() []byte {
	if x != nil {
		return x.SccPrices
	}
	return nil
}

func (x *PullResponseSui) GetSccTimestamp() []byte {
	if x != nil {
		return x.SccTimestamp
	}
	return nil
}

func (x *PullResponseSui) GetSccDecimals() []byte {
	if x != nil {
		return x.SccDecimals
	}
	return nil
}

func (x *PullResponseSui) GetSccQc() []byte {
	if x != nil {
		return x.SccQc
	}
	return nil
}

func (x *PullResponseSui) GetSccRound() []byte {
	if x != nil {
		return x.SccRound
	}
	return nil
}

func (x *PullResponseSui) GetSccId() []byte {
	if x != nil {
		return x.SccId
	}
	return nil
}

func (x *PullResponseSui) GetSccMemberIndex() []byte {
	if x != nil {
		return x.SccMemberIndex
	}
	return nil
}

func (x *PullResponseSui) GetSccCommitteeIndex() []byte {
	if x != nil {
		return x.SccCommitteeIndex
	}
	return nil
}

func (x *PullResponseSui) GetBatchIdx() []byte {
	if x != nil {
		return x.BatchIdx
	}
	return nil
}

func (x *PullResponseSui) GetTxnIdx() []byte {
	if x != nil {
		return x.TxnIdx
	}
	return nil
}

func (x *PullResponseSui) GetClusterIdx() []byte {
	if x != nil {
		return x.ClusterIdx
	}
	return nil
}

func (x *PullResponseSui) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *PullResponseSui) GetPairMask() []byte {
	if x != nil {
		return x.PairMask
	}
	return nil
}

type PullResponseAptos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairIndexes             []uint32 `protobuf:"varint,1,rep,packed,name=pair_indexes,json=pairIndexes,proto3" json:"pair_indexes,omitempty"`
	DkgObject               string   `protobuf:"bytes,2,opt,name=dkg_object,json=dkgObject,proto3" json:"dkg_object,omitempty"`
	OracleHolderObject      string   `protobuf:"bytes,3,opt,name=oracle_holder_object,json=oracleHolderObject,proto3" json:"oracle_holder_object,omitempty"`
	VoteSmrBlockRound       []byte   `protobuf:"bytes,5,opt,name=vote_smr_block_round,json=voteSmrBlockRound,proto3" json:"vote_smr_block_round,omitempty"`
	VoteSmrBlockTimestamp   []byte   `protobuf:"bytes,6,opt,name=vote_smr_block_timestamp,json=voteSmrBlockTimestamp,proto3" json:"vote_smr_block_timestamp,omitempty"`
	VoteSmrBlockAuthor      []byte   `protobuf:"bytes,7,opt,name=vote_smr_block_author,json=voteSmrBlockAuthor,proto3" json:"vote_smr_block_author,omitempty"`
	VoteSmrBlockQcHash      []byte   `protobuf:"bytes,8,opt,name=vote_smr_block_qc_hash,json=voteSmrBlockQcHash,proto3" json:"vote_smr_block_qc_hash,omitempty"`
	VoteSmrBlockBatchHashes []byte   `protobuf:"bytes,9,opt,name=vote_smr_block_batch_hashes,json=voteSmrBlockBatchHashes,proto3" json:"vote_smr_block_batch_hashes,omitempty"`
	VoteRound               []byte   `protobuf:"bytes,10,opt,name=vote_round,json=voteRound,proto3" json:"vote_round,omitempty"`
	MinBatchProtocol        []byte   `protobuf:"bytes,11,opt,name=min_batch_protocol,json=minBatchProtocol,proto3" json:"min_batch_protocol,omitempty"`
	MinBatchTxnHashes       []byte   `protobuf:"bytes,12,opt,name=min_batch_txn_hashes,json=minBatchTxnHashes,proto3" json:"min_batch_txn_hashes,omitempty"`
	MinTxnClusterHashes     []byte   `protobuf:"bytes,13,opt,name=min_txn_cluster_hashes,json=minTxnClusterHashes,proto3" json:"min_txn_cluster_hashes,omitempty"`
	MinTxnSender            []byte   `protobuf:"bytes,14,opt,name=min_txn_sender,json=minTxnSender,proto3" json:"min_txn_sender,omitempty"`
	MinTxnProtocol          []byte   `protobuf:"bytes,15,opt,name=min_txn_protocol,json=minTxnProtocol,proto3" json:"min_txn_protocol,omitempty"`
	MinTxnTxSubType         []byte   `protobuf:"bytes,16,opt,name=min_txn_tx_sub_type,json=minTxnTxSubType,proto3" json:"min_txn_tx_sub_type,omitempty"`
	SccDataHash             []byte   `protobuf:"bytes,17,opt,name=scc_data_hash,json=sccDataHash,proto3" json:"scc_data_hash,omitempty"`
	SccPair                 []byte   `protobuf:"bytes,18,opt,name=scc_pair,json=sccPair,proto3" json:"scc_pair,omitempty"`
	SccPrices               []byte   `protobuf:"bytes,19,opt,name=scc_prices,json=sccPrices,proto3" json:"scc_prices,omitempty"`
	SccTimestamp            []byte   `protobuf:"bytes,20,opt,name=scc_timestamp,json=sccTimestamp,proto3" json:"scc_timestamp,omitempty"`
	SccDecimals             []byte   `protobuf:"bytes,21,opt,name=scc_decimals,json=sccDecimals,proto3" json:"scc_decimals,omitempty"`
	SccQc                   []byte   `protobuf:"bytes,22,opt,name=scc_qc,json=sccQc,proto3" json:"scc_qc,omitempty"`
	SccRound                []byte   `protobuf:"bytes,23,opt,name=scc_round,json=sccRound,proto3" json:"scc_round,omitempty"`
	SccId                   []byte   `protobuf:"bytes,24,opt,name=scc_id,json=sccId,proto3" json:"scc_id,omitempty"`
	SccMemberIndex          []byte   `protobuf:"bytes,25,opt,name=scc_member_index,json=sccMemberIndex,proto3" json:"scc_member_index,omitempty"`
	SccCommitteeIndex       []byte   `protobuf:"bytes,26,opt,name=scc_committee_index,json=sccCommitteeIndex,proto3" json:"scc_committee_index,omitempty"`
	BatchIdx                []byte   `protobuf:"bytes,27,opt,name=batch_idx,json=batchIdx,proto3" json:"batch_idx,omitempty"`
	TxnIdx                  []byte   `protobuf:"bytes,28,opt,name=txn_idx,json=txnIdx,proto3" json:"txn_idx,omitempty"`
	ClusterIdx              []byte   `protobuf:"bytes,29,opt,name=cluster_idx,json=clusterIdx,proto3" json:"cluster_idx,omitempty"`
	Sig                     []byte   `protobuf:"bytes,30,opt,name=sig,proto3" json:"sig,omitempty"`
	PairMask                []byte   `protobuf:"bytes,31,opt,name=pair_mask,json=pairMask,proto3" json:"pair_mask,omitempty"`
}

func (x *PullResponseAptos) Reset() {
	*x = PullResponseAptos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oracle_supra_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullResponseAptos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullResponseAptos) ProtoMessage() {}

func (x *PullResponseAptos) ProtoReflect() protoreflect.Message {
	mi := &file_oracle_supra_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullResponseAptos.ProtoReflect.Descriptor instead.
func (*PullResponseAptos) Descriptor() ([]byte, []int) {
	return file_oracle_supra_client_proto_rawDescGZIP(), []int{4}
}

func (x *PullResponseAptos) GetPairIndexes() []uint32 {
	if x != nil {
		return x.PairIndexes
	}
	return nil
}

func (x *PullResponseAptos) GetDkgObject() string {
	if x != nil {
		return x.DkgObject
	}
	return ""
}

func (x *PullResponseAptos) GetOracleHolderObject() string {
	if x != nil {
		return x.OracleHolderObject
	}
	return ""
}

func (x *PullResponseAptos) GetVoteSmrBlockRound() []byte {
	if x != nil {
		return x.VoteSmrBlockRound
	}
	return nil
}

func (x *PullResponseAptos) GetVoteSmrBlockTimestamp() []byte {
	if x != nil {
		return x.VoteSmrBlockTimestamp
	}
	return nil
}

func (x *PullResponseAptos) GetVoteSmrBlockAuthor() []byte {
	if x != nil {
		return x.VoteSmrBlockAuthor
	}
	return nil
}

func (x *PullResponseAptos) GetVoteSmrBlockQcHash() []byte {
	if x != nil {
		return x.VoteSmrBlockQcHash
	}
	return nil
}

func (x *PullResponseAptos) GetVoteSmrBlockBatchHashes() []byte {
	if x != nil {
		return x.VoteSmrBlockBatchHashes
	}
	return nil
}

func (x *PullResponseAptos) GetVoteRound() []byte {
	if x != nil {
		return x.VoteRound
	}
	return nil
}

func (x *PullResponseAptos) GetMinBatchProtocol() []byte {
	if x != nil {
		return x.MinBatchProtocol
	}
	return nil
}

func (x *PullResponseAptos) GetMinBatchTxnHashes() []byte {
	if x != nil {
		return x.MinBatchTxnHashes
	}
	return nil
}

func (x *PullResponseAptos) GetMinTxnClusterHashes() []byte {
	if x != nil {
		return x.MinTxnClusterHashes
	}
	return nil
}

func (x *PullResponseAptos) GetMinTxnSender() []byte {
	if x != nil {
		return x.MinTxnSender
	}
	return nil
}

func (x *PullResponseAptos) GetMinTxnProtocol() []byte {
	if x != nil {
		return x.MinTxnProtocol
	}
	return nil
}

func (x *PullResponseAptos) GetMinTxnTxSubType() []byte {
	if x != nil {
		return x.MinTxnTxSubType
	}
	return nil
}

func (x *PullResponseAptos) GetSccDataHash() []byte {
	if x != nil {
		return x.SccDataHash
	}
	return nil
}

func (x *PullResponseAptos) GetSccPair() []byte {
	if x != nil {
		return x.SccPair
	}
	return nil
}

func (x *PullResponseAptos) GetSccPrices() []byte {
	if x != nil {
		return x.SccPrices
	}
	return nil
}

func (x *PullResponseAptos) GetSccTimestamp() []byte {
	if x != nil {
		return x.SccTimestamp
	}
	return nil
}

func (x *PullResponseAptos) GetSccDecimals() []byte {
	if x != nil {
		return x.SccDecimals
	}
	return nil
}

func (x *PullResponseAptos) GetSccQc() []byte {
	if x != nil {
		return x.SccQc
	}
	return nil
}

func (x *PullResponseAptos) GetSccRound() []byte {
	if x != nil {
		return x.SccRound
	}
	return nil
}

func (x *PullResponseAptos) GetSccId() []byte {
	if x != nil {
		return x.SccId
	}
	return nil
}

func (x *PullResponseAptos) GetSccMemberIndex() []byte {
	if x != nil {
		return x.SccMemberIndex
	}
	return nil
}

func (x *PullResponseAptos) GetSccCommitteeIndex() []byte {
	if x != nil {
		return x.SccCommitteeIndex
	}
	return nil
}

func (x *PullResponseAptos) GetBatchIdx() []byte {
	if x != nil {
		return x.BatchIdx
	}
	return nil
}

func (x *PullResponseAptos) GetTxnIdx() []byte {
	if x != nil {
		return x.TxnIdx
	}
	return nil
}

func (x *PullResponseAptos) GetClusterIdx() []byte {
	if x != nil {
		return x.ClusterIdx
	}
	return nil
}

func (x *PullResponseAptos) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *PullResponseAptos) GetPairMask() []byte {
	if x != nil {
		return x.PairMask
	}
	return nil
}

var File_oracle_supra_client_proto protoreflect.FileDescriptor

var file_oracle_supra_client_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x72, 0x61, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x50, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x76,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x76, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x65, 0x76, 0x6d, 0x12, 0x31, 0x0a,
	0x03, 0x73, 0x75, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x69, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75, 0x69,
	0x12, 0x37, 0x0a, 0x05, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x65, 0x73,
	0x70, 0x22, 0x4f, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x55, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x76, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x69,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x96, 0x09, 0x0a, 0x0f, 0x50, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x69, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6b, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6b, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x72, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x6d, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x72, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x6d, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x76, 0x6f, 0x74, 0x65,
	0x53, 0x6d, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x32,
	0x0a, 0x16, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x71, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x76, 0x6f, 0x74, 0x65, 0x53, 0x6d, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x51, 0x63, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x3c, 0x0a, 0x1b, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x72, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x6d, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2f, 0x0a,
	0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6d, 0x69, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13,
	0x6d, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x54, 0x78, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74,
	0x78, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x54, 0x78, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x63, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x63, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x63, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x63, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x63, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x63, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x63, 0x63, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x63, 0x63, 0x5f, 0x71,
	0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x63, 0x63, 0x51, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x63, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x73, 0x63, 0x63, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x63, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x63, 0x63,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x63,
	0x63, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x63, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x63, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x6e,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x6e, 0x49,
	0x64, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x98, 0x09, 0x0a, 0x11, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x6b, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x6b, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x14,
	0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x76, 0x6f, 0x74, 0x65,
	0x53, 0x6d, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x15, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x6d, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73,
	0x6d, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x6d, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x16, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x73, 0x6d, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x63, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x76, 0x6f, 0x74, 0x65, 0x53,
	0x6d, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x51, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a,
	0x1b, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x6d, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x17, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x6d, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69,
	0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x78, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x54, 0x78,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x6d, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2c,
	0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6d, 0x69, 0x6e,
	0x54, 0x78, 0x6e, 0x54, 0x78, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x63, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x63, 0x63, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x63, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x63, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x63, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x73, 0x63, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x63, 0x63, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x63, 0x63, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x63, 0x63, 0x5f, 0x71, 0x63, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x73, 0x63, 0x63, 0x51, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x63,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x63,
	0x63, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x63, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x63, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x63, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x63, 0x63, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x63, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x63, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x32, 0x50, 0x0a,
	0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x19, 0x2e, 0x70, 0x75, 0x6c, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x33,
	0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x73, 0x75, 0x69, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x72, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_oracle_supra_client_proto_rawDescOnce sync.Once
	file_oracle_supra_client_proto_rawDescData = file_oracle_supra_client_proto_rawDesc
)

func file_oracle_supra_client_proto_rawDescGZIP() []byte {
	file_oracle_supra_client_proto_rawDescOnce.Do(func() {
		file_oracle_supra_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_oracle_supra_client_proto_rawDescData)
	})
	return file_oracle_supra_client_proto_rawDescData
}

var file_oracle_supra_client_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_oracle_supra_client_proto_goTypes = []interface{}{
	(*PullResponse)(nil),      // 0: pull_service.PullResponse
	(*PullRequest)(nil),       // 1: pull_service.PullRequest
	(*PullResponseEvm)(nil),   // 2: pull_service.PullResponseEvm
	(*PullResponseSui)(nil),   // 3: pull_service.PullResponseSui
	(*PullResponseAptos)(nil), // 4: pull_service.PullResponseAptos
}
var file_oracle_supra_client_proto_depIdxs = []int32{
	2, // 0: pull_service.PullResponse.evm:type_name -> pull_service.PullResponseEvm
	3, // 1: pull_service.PullResponse.sui:type_name -> pull_service.PullResponseSui
	4, // 2: pull_service.PullResponse.aptos:type_name -> pull_service.PullResponseAptos
	1, // 3: pull_service.PullService.GetProof:input_type -> pull_service.PullRequest
	0, // 4: pull_service.PullService.GetProof:output_type -> pull_service.PullResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_oracle_supra_client_proto_init() }
func file_oracle_supra_client_proto_init() {
	if File_oracle_supra_client_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_oracle_supra_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_supra_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_supra_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullResponseEvm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_supra_client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullResponseSui); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oracle_supra_client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullResponseAptos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_oracle_supra_client_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PullResponse_Evm)(nil),
		(*PullResponse_Sui)(nil),
		(*PullResponse_Aptos)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_oracle_supra_client_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_oracle_supra_client_proto_goTypes,
		DependencyIndexes: file_oracle_supra_client_proto_depIdxs,
		MessageInfos:      file_oracle_supra_client_proto_msgTypes,
	}.Build()
	File_oracle_supra_client_proto = out.File
	file_oracle_supra_client_proto_rawDesc = nil
	file_oracle_supra_client_proto_goTypes = nil
	file_oracle_supra_client_proto_depIdxs = nil
}
